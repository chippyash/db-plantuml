@startuml
/'
 * PlantUml Physical Database support
 *
 * @author    Ashley Kitson
 * @license   BSD-3 Clause
 * @copyright Ashley Kitson, UK, 2020
'/
/'
Components
'/
'Physical diagrams deal with Tables, so mark class a T
!unquoted procedure Table(alias, name="", description="")
	!if (%strlen(name) == 0)
		!name = alias
	!endif
	!if (%strlen(description) > 0)
		class alias as "name\n(description)" << (T,red)Table >>
    !else
    	class "name" as alias << (T,red)Table >>
	!endif
!endprocedure
'Psuedonym for Table
!define Entity(alias, name="", description="") Table(alias, name, description)

' Type (Enum)
!unquoted procedure Type(alias, name="", description="")
	!if (%strlen(name) == 0)
    	!name = alias
    !endif
    !if (%strlen(description) > 0)
		enum alias as "name\n(description)" << (E, green)Enum>>
	!else
		enum "name" as alias << (E, green)Enum>>
    !endif
!endprocedure
'Set (Enum)
!unquoted procedure Set(alias, name="", description="")
	!if (%strlen(name) == 0)
    	!name = alias
    !endif
    !if (%strlen(description) > 0)
		enum alias as "name\n(description)" << (S, green)Set>>
	!else
		enum "name" as alias << (S, green)Set>>
    !endif
!endprocedure

!define Trigger(alias, name) class "name" as alias << (G, Cyan)Trigger >> #cyan
!define Proc(alias, name) class "name" as alias << (P, Cyan)Proc >> #cyan
!define View(alias, name) class "name" as alias << (V,cyan)View >>

/'
Data Types
'/
!define string(l=30) VARCHAR[l]
!define char(l=12) CHAR[l]
!define text() TEXT
!define date() DATE
!define time() TIME
!define datetime() DATETIME
!define int(l=8) INT[l]
!define real() DOUBLE
!define bool() BOOLEAN

/'
Data Type modifiers
'/
!define not_null(x, t) x t NOT NULL
!define unsigned(n, l=8) n int(l) UNSIGNED
!define _unsigned(l=8) INT[l] UNSIGNED
/'
Indexes
'/
'Primary key is bold. By default PKs are called 'id' and are autoincrement Integers
!unquoted procedure primary($name = 'id', $type=_unsigned(), $auto=1)
	!if ($auto == 1)
		!$autoincrement = 'AUTOINCREMENT'
	!else
		!$autoincrement = ''
	!endif
	$name $type PRIMARY KEY $autoincrement
!endprocedure

'Non unique index
!unquoted procedure idx($name, $type=int())
	$name $type
	index($name)
!endprocedure

'Unique Index
!unquoted procedure unique($name, $type=int())
	$name $type
	key($name)
!endprocedure

'Generic index definitions
!define idx2(name1, name2) index(name1, name2)
!define idx3(name1, name2, name3) index(name1, name2, name3)

/'
Foreign keys. By default FKs are <tablename>_id and are integers
'/
!unquoted procedure foreign_key($tableName, $to, $type=int(), $suffix='_id')
	!$fkname = $tableName + $suffix
	$fkname $type
	$to : fk($fkname, $tableName)
!endprocedure

/'
Table joins
'/
!unquoted procedure _join($from, $to, $verb, $fNum, $tNum)
	!if ($fNum == 0)
		!if ($tNum == 0)
			$from |o--o| $to: $verb
		!endif
		!if ($tNum == 1)
			$from |o--|| $to: $verb
		!endif
		!if ($tNum == 'n')
			$from |o--|{ $to: $verb
		!endif
		!if (%intval($tNum) > 1)
			$from |o--|{ "$tNum" $to: $verb
		!endif
	!endif
	!if ($fNum == 1)
		!if ($tNum == 0)
			$from ||--o| $to: $verb
		!endif
		!if ($tNum == 1)
			$from ||--|| $to: $verb
		!endif
		!if ($tNum == 'n')
			$from ||--|{ $to: $verb
		!endif
		!if (%intval($tNum) > 1)
			$from ||--|{ "$tNum" $to: $verb
		!endif
	!endif
	!if ($fNum == 'n')
		!if ($tNum == 0)
			$from }|--o| $to: $verb
		!endif
		!if ($tNum == 1)
			$from }|--|| $to: $verb
		!endif
		!if ($tNum == 'n')
			$from }|--|{ $to: $verb
		!endif
		!if (%intval($tNum) > 1)
			$from }|--|{ "$tNum" $to: $verb
		!endif
	!endif
	!if (%intval($fNum) > 1)
		!if ($tNum == 0)
			$from "$fNum" }|--o| $to: $verb
		!endif
		!if ($tNum == 1)
			$from "$fNum" }|--|| $to: $verb
		!endif
		!if ($tNum == 'n')
			$from "$fNum" }|--|{ $to: $verb
		!endif
		!if (%intval($tNum) > 1)
			$from "$fNum" }|--|{ "$tNum" $to: $verb
		!endif
	!endif
!endprocedure

'Zero, one or more to many
!unquoted procedure zeromany(from, to, verb, tNum='n')
	_join(from,to,verb,0,tNum)
	to : foreign_key(from, to)
!endprocedure

'One To One
!unquoted procedure oneone(from, to, verb, keyname='id', type=int())
	_join(from,to,verb,1,1)
!endprocedure

'One to Many
!unquoted procedure onemany(from, to, verb, tNum='n')
	_join(from,to,verb,1,tNum)
	to : foreign_key(from, to)
!endprocedure

'Many to Many
!unquoted procedure manymany($from, $to, $verbFrom, $verbTo)
	!$tId = $from + $to
	!$tNm = $from + '_' + $to
	Table($tId, $tNm) {
	}
	onemany($from, $tId, $verbFrom)
	onemany($to, $tId, $verbTo)
!endprocedure

'One To One
!unquoted procedure procedure(from, to, verb, keyname='id', type=int())
	_join(from,to,verb,1,1)
	to : primary(keyname, type, 0)
!endprocedure

'Type Dependency
!unquoted procedure depends($from, $to, $colName)
	$from : $to $colName NOT NULL
	$from::$colName --> $to : $colName
!endprocedure

'table action trigger
!unquoted procedure triggers($from, $to)
	$from .> $to
!endprocedure

'proc uses table
!unquoted procedure uses($from, $to)
	$from ..> $to
!endprocedure

hide stereotypes
hide empty members

@enduml